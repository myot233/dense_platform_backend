<passage file_path=/database/table.py>
from sqlalchemy import Column, BIGINT, String, Date, Boolean, Enum
from sqlalchemy.ext.declarative import declarative_base

if __name__ != '__main__':
    from .db import engine
else:
    from db import engine
Base = declarative_base()


class UserAccount(Base):
    __tablename__ = 'users'
    id = Column(String(20), primary_key=True)
    password = Column(String(20))


class UserDetail(Base):
    __tablename__ = 'user_details'
    id = Column(String(20), primary_key=True)
    name = Column(String(20))
    #type = Column(Enum)
    sex = Column(Boolean)
    birth = Column(Date)
    phone = Column(String(20))
    email = Column(String(100))
    address = Column(String(100))


class DenseReport(Base):
    __tablename__ = 'dense_report'
    id = Column(BIGINT, primary_key=True, autoincrement=True)
    user = Column(String(20))
    doctor = Column(String(20))
    image = Column(String(1024))
    submitTime = Column(Date)
    current_status = Column(String(20))


if __name__ == '__main__':

</passage>
<passage file_path=/utils/__init__.py>
from .jwt import makeAccountJwt,resolveAccountJwt

</passage>
<passage file_path=/database/api.py>
from datetime import datetime
from typing import List

import sqlalchemy.exc
from pymysql import IntegrityError
from sqlalchemy.orm import sessionmaker, Session

from .table import UserAccount, UserDetail, DenseReport
from sqlalchemy import and_, or_, func

from .db import engine


def addReport(session, user: str, doctor: str, fileId: str) -> DenseReport:
    report = DenseReport(user=user, doctor=doctor, image=fileId, submitTime=datetime.now().date(),
                         current_status='检测中')
    session.add(report)
    session.commit()
    return report


def get_reports(session:Session,id:str)->List[DenseReport]:

    reports = session.query(DenseReport).filter(DenseReport.user == id).all()
    session.commit()
    return reports


def queryInfo(session, username: str) -> UserDetail:
    user = session.query(UserDetail).filter(UserDetail.id == username).first()
    session.commit()
    return user


def deleteInfo(session, username: str) -> UserDetail:

</passage>
<passage file_path=/database/table.py>
if __name__ == '__main__':
    engine.connect()

    Base.metadata.create_all(engine)

</passage>
<passage file_path=/database/api.py>
def deleteInfo(session, username: str) -> UserDetail:
    user = session.query(UserDetail).filter(UserDetail.id == username).first()
    if user is not None:
        session.delete(user)
        session.commit()


def addInfo(session, userinfo: UserDetail):
    try:
        session.add(userinfo)
        session.commit()
    except sqlalchemy.exc.IntegrityError as err:
        session.rollback()
        return False
    return True


def queryAccount(session, account: str, password: str) -> UserAccount:
    user = session.query(UserAccount).filter(
        and_(UserAccount.id == account, UserAccount.password == password)).first()
    session.commit()
    return user


def addUserAccount(session, account: str, password: str) -> bool:
    user = UserAccount(id=account, password=password)
    try:
        session.add(user)
        session.commit()
    except sqlalchemy.exc.IntegrityError as err:

        session.rollback()
        return False
    return True


if __name__ == '__main__':

</passage>
<passage file_path=/response.py>
from pydantic import BaseModel
from typing import TypeVar, Generic

T = TypeVar('T')


class Response(BaseModel, Generic[T]):
    code: int = 0
    message: str = ""

</passage>
<passage file_path=/test.py>
from sqlalchemy.orm import sessionmaker

from database.api import get_reports
from database.db import engine
from utils import resolveAccountJwt,makeAccountJwt

Session = sessionmaker(bind=engine)
session = Session()
print(get_reports(session))
print(makeAccountJwt("myot233"))
</passage>
<passage file_path=/utils/jwt.py>
from jwt import encode, decode
import datetime


def makeAccountJwt(account: str) -> str:
    secret = "this_is_the_secret"
    payload = {
        "account": account,
        "exp": datetime.datetime.now() + datetime.timedelta(days=30),
    }
    return encode(payload, secret, algorithm='HS256')


def resolveAccountJwt(token: str) -> dict:
    secret = "this_is_the_secret"
    return decode(token, secret, algorithms='HS256')


if __name__ == '__main__':
    token = makeAccountJwt("gsycl2004")
    print(token)

</passage>
<passage file_path=/api/user/info.py>
@router.post("/api/submitInfo")
async def submitInfo(request: SubmitInfoRequest):
    Session = sessionmaker(bind=engine)
    session = Session()
    username = resolveAccountJwt(request.token)["account"]
    with session:
        deleteInfo(session, username)
        form = request.form.dict()
        form["sex"] = False if form["sex"] == "female" else True
        form["birth"] = form["birth"].split("T")[0]
        detail = UserDetail(id=username, **form)
        addInfo(session, detail)
        return Response()


@router.post("/api/uploadAvatar")

</passage>
<passage file_path=/api/user/info.py>
@router.post("/api/info")
async def info(request: InfoRequest):
    Session = sessionmaker(bind=engine)
    session = Session()
    username = resolveAccountJwt(request.token)["account"]
    with session:
        userInfo = queryInfo(session, username)
        print(userInfo)
        if userInfo is None:
            return InfoResponse(code="33", message="用户没有设置信息", form=Form(name=username))
        return InfoResponse(
            form=Form(name=userInfo.name, sex=str("male" if userInfo.sex else "female"), birth=str(userInfo.birth),
                      phone=userInfo.phone,
                      email=userInfo.email, address=userInfo.address))


class SubmitInfoRequest(BaseModel):
    token: str
    form: Form


@router.post("/api/submitInfo")

</passage>
<passage file_path=/api/user/info.py>
import os
import pathlib
from typing import Any

from fastapi import APIRouter, UploadFile, Request
from pydantic import BaseModel

from database.api import *
from response import Response
from utils import (resolveAccountJwt)
from fastapi.responses import StreamingResponse

router = APIRouter()


class InfoRequest(BaseModel):
    token: str


class Form(BaseModel):
    def __init__(self, /, **data: Any):
        super().__init__(**data)

    name: str = None
    sex: str = None
    birth: str = None
    phone: str = None
    email: str = None
    address: str = None


class InfoResponse(Response):
    def __init__(self, /, **data: Any):
        super().__init__(**data)

    form: Form


@router.post("/api/info")

</passage>
<passage file_path=/api/user/__init__.py>
from fastapi import APIRouter
from .login import router as user_login_router
from .info import router as user_info_router
from .report import router as report_router
router = APIRouter()
router.include_router(user_login_router)
router.include_router(user_info_router)
router.include_router(report_router)
</passage>
<passage file_path=/api/user/report.py>
@router.post("/api/getReports")
async def getReports(request: GetReportRequest):
    username = resolveAccountJwt(request.token)["account"]
    Session = sessionmaker(bind=engine)
    session = Session()
    with session:
        reports = get_reports(session, username)

        return ReportResponse(reports=list(map(
            lambda x: Report(id=x.id, user=x.user, doctor=x.doctor, image=x.image, submitTime=x.submitTime.strftime("%Y-%m-%d"),
                             current_status=x.current_status), reports)))


@router.post("/api/getReport")
async def getReports(request):
    pass

</passage>
<passage file_path=/api/__init__.py>
from .user import router as user_router

</passage>
<passage file_path=/api/user/report.py>
@router.post("/api/submitReport")
async def submitReport(request: ReportRequest):
    Session = sessionmaker(bind=engine)
    session = Session()
    username = resolveAccountJwt(request.token)["account"]
    with session:
        report = addReport(session, username, request.doctor, request.fileId)
        return Response()


class GetReportRequest(BaseModel):
    token: str


class Report(BaseModel):
    id: int
    user: str
    doctor: str
    image: str
    submitTime: str
    current_status: str


class ReportResponse(Response):
    reports: List[Report]


@router.post("/api/getReports")

</passage>
<passage file_path=/api/user/report.py>
import os
import pathlib
import uuid
from typing import Any, List

from fastapi import APIRouter, UploadFile, Request
from pydantic import BaseModel

from database.api import *
from response import Response
from utils import (resolveAccountJwt)
from fastapi.responses import StreamingResponse

router = APIRouter()


class UploadResponse(Response):
    fileId: str


@router.post("/api/uploadImage")
async def uploadImage(request: Request):
    token = request.headers.get("token", None)
    if token is None:
        return Response(code=34, message="用户未登录")
    username = resolveAccountJwt(token)["account"]
    form = await request.form()
    file = form.get("file")
    fileFormat = file.filename.split(".")[-1]
    id = f"{uuid.uuid1()}.{fileFormat}"
    with open(f"images/{id}", "wb") as f:
        f.write(await file.read())
    return UploadResponse(code=0, message="", fileId=id)


class ReportRequest(BaseModel):
    token: str
    doctor: str
    fileId: str


@router.post("/api/submitReport")

</passage>
<passage file_path=/database/db.py>
from sqlalchemy import create_engine

engine = create_engine(
    "mysql+pymysql://server:yqqlm2004@localhost:3306/dense_platform",
    echo=True
)

</passage>
<passage file_path=/database/api.py>
if __name__ == '__main__':
    Session = sessionmaker(bind=engine)
    session = Session()
    print(get_reports(session))

</passage>
<passage file_path=/main.py>
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from api import user_router

app = FastAPI()
origins = [
    "http://localhost.tiangolo.com",
    "https://localhost.tiangolo.com",
    "http://localhost",
    "http://localhost:5173",
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
app.include_router(user_router)

</passage>
<passage file_path=/api/user/login.py>
import datetime
from typing import Any

from fastapi import APIRouter

from database.api import *
from response import Response
from pydantic import BaseModel
import jwt

from utils import makeAccountJwt

router = APIRouter()


class LoginRequest(BaseModel):
    username: str
    password: str


class LoginResponse(Response):
    def __init__(self, /, **data: Any):
        super().__init__(**data)

    token: str | None



@router.post("/api/login", response_model=LoginResponse)
async def login(request: LoginRequest):
    Session = sessionmaker(bind=engine)
    session = Session()
    with session:
        user = queryAccount(session, request.username, request.password)
        if user is None:
            return LoginResponse(code=31, message="错误的账号或者密码", token=None)
        return LoginResponse(token=makeAccountJwt(user.id))


@router.post("/api/register", response_model=LoginResponse)

</passage>
<passage file_path=/api/doctor/info.py>
from fastapi import APIRouter

router = APIRouter()


@router.get("/api/doctors")
async def doctors():
    pass

</passage>
<passage file_path=/api/user/login.py>
@router.post("/api/register", response_model=LoginResponse)
async def register(request: LoginRequest):
    Session = sessionmaker(bind=engine)
    session = Session()
    with session:
        user = addUserAccount(session, request.username, request.password)
        if not user:
            return LoginResponse(code=32, message="已存在的账号", token=None)
        return LoginResponse(token=makeAccountJwt(request.username))


</passage>
